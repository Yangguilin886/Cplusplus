#include<assert.h>
#include<list>
namespace man
{
	template<class T>
	class vector
	{
	public:
		typedef T* iterator;
		typedef const T* const_iterator;
		vector()
		{ }
		vector(const vector<T>& v)
		{
			for (auto ch : v)
			{
				push_back(ch);
			}
		}
		template <class Inputiterator>
		vector(Inputiterator first, Inputiterator last)
		{
			while (first != last)
			{
				push_back(*first);
				++first;
			}
		}
		vector(size_t n, const T& vul=T())
		{
			reserve(n);
			for (size_t i = 0; i < n; i++)
			{
				push_back(vul);
			}
		}
		~vector()
		{
			if (_start)
			{
				delete[] _start;
			}
			_start = _finish = _end_of_storage=nullptr;
		}
		iterator begin()
		{
			return _start;
		}
		const iterator begin()const
		{
			return _start;
		}
		iterator end()
		{
			return _finish;
		}
		const iterator end()const
		{
			return _finish;
		}
		size_t capacity()
		{
			return _end_of_storage - _start;
		}
		size_t size()
		{
			return _finish - _start;
		}
		void reserve(size_t n)
		{
			if (n > capacity())
			{
				T* tmp = new T[n];
				memcpy(tmp, _start, size()*sizeof(T));
				size_t oldsize = size();
				delete[] _start;
				_start = tmp;
				_finish = _start + oldsize;
				_end_of_storage = _start + n;
			}
		}
		void push_back(const T& x)
		{
			if (_end_of_storage == _finish)
			{
				reserve(capacity() == 0 ? 4 : capacity() * 2);
			}
			*_finish = x;
			++_finish;
		}
		T& operator[](size_t x)
		{
			return _start[x];
		}
		const T& operator[](size_t x)const
		{
			return _start[x];
		}
		bool empty()
		{
			return _start == _finish;
		}
		void pop_back()
		{
			assert(empty());
			--_finish;
		}
		void insert(iterator pos, const T& x)
		{
			size_t old_size = pos - _start;
			if (_finish == _end_of_storage)
			{
				reserve(capacity() == 0 ? 4 : capacity() * 2);
				pos = _start + old_size;
			}
			iterator end = _finish-1;
			while (end >= pos)
			{
				*(end+1) = *end;
				--end;
			}
			*pos = x;
			++_finish;
		}
		void erase(iterator pos)
		{
			assert(pos < _finish);
			assert(pos >= _start);
			iterator tmp = pos+1;
			while (tmp != end())
			{
				*(tmp - 1) = *tmp;
				tmp++;
			}
			--_finish;
		}
		void resize(size_t n, const T& vul = T())
		{
			if (n < size())
			{
				_finish = _start + n;
			}
			else
			{
				if (n > capacity())
				{
					reserve(n);
				}
				for (size_t i = size(); i < n; i++)
				{
					push_back(vul);
				}
			}
		}
		void clear()
		{
			_finish = _start;
		}
		void swap(vector<T>& v)
		{
			std::swap(_start, v._start);
			std::swap(_finish, v._finish);
			std::swap(_end_of_storage,v._end_of_storage);
		}
		vector<T>& operator=(vector<T>& v)
		{
			clear();
			reserve(v.size());
			for (auto ch : v)
			{
				push_back(ch);
			}
			return *this;
		}
		/*vector<T>& operator= (vector<T> v)
		{
			swap(v);
			return *this;
		}*/
	private:
		iterator _start = nullptr;
		iterator _finish = nullptr;
		iterator _end_of_storage = nullptr;
	};
	template<class T>
	void print_vector(const vector<T>& v)
	{
		/*typename vector<T>::const_iterator it = v.begin();*/
		auto it = v.begin();
		while (it != v.end())
		{
			cout << *it << ' ';
			++it;
		}
		cout << endl;
		for (auto ch : v)
		{
			cout << ch << ' ';
		}
		cout << endl;
	}
	void text_vector1()
	{
		vector<int> v;
		v.push_back(1);
		v.push_back(2);
		v.push_back(3);
		v.push_back(4);
		v.push_back(5);
		print_vector(v);
	}
	void text_vector2()
	{
		vector<int> v;
		v.push_back(1);
		v.push_back(2);
		v.push_back(3);
		v.push_back(4);
		v.insert(v.begin()+2, 35);
		print_vector(v);
		int x;
		cin >> x;
		auto pos = find(v.begin(), v.end(),x);
		v.insert(pos, 100);
		print_vector(v);
	}
	void text_vector3()
	{
		vector<int> v;
		v.push_back(1);
		v.push_back(2);
		v.push_back(3);
		v.push_back(4);
		v.push_back(4);
		v.push_back(5);
		/*v.erase(v.begin() + 1);
		print_vector(v);
		v.erase(v.end()-1);
		print_vector(v);*/
		//删除所有偶数
		auto it = v.begin();
		while (it != v.end())
		{
			if (*it % 2 == 0)
			{
				v.erase(it);
			}
			else
			{
				++it;
			}
		}
		print_vector(v);
	}
	void text_vector4()
	{
		vector<int> v;
		v.resize(10, 1);
		v.reserve(20);
		print_vector(v);
		cout << v.size() << " " << v.capacity() << endl;

		v.resize(15, 2);
		print_vector(v);

		v.resize(25, 3);
		print_vector(v);
	}
	void text_vector5()
	{
		vector<int> v1;
		v1.push_back(1);
		v1.push_back(2);
		v1.push_back(3);
		v1.push_back(4);

		vector<int> v2 = v1;
		print_vector(v2);

		vector<int> v3;
		v3.push_back(10);
		v3.push_back(20);
		v3.push_back(30);
		v2 = v3;
		print_vector(v2);
		print_vector(v3);
	}
	void text_vector6()
	{
		vector<int> v1;
		v1.push_back(1);
		v1.push_back(2);
		v1.push_back(3);
		v1.push_back(4);

		vector<int> v2(v1.begin() + 1, v1.end() - 1);
		print_vector(v2);

		list<int> it;
		it.push_back(10);
		it.push_back(20);
		it.push_back(30);
		vector<int> v3(it.begin(),it.end());
		print_vector(v3);
	}
}