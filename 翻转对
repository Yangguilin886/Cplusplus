class Solution {
public:
    void qsort(vector<int>& nums,int left,int right,int& n)
    {
        if(left>=right)
        {
            return;
        }
        int mid=left+(right-left)/2;
        qsort(nums,left,mid,n);
        qsort(nums,mid+1,right,n);
        int i=left,j=mid+1;
        vector<int> ret(right-left+1);
        int m=0;
        while(i<=mid&&j<=right)
        {
            long long tmp=(long long)2*nums[j];
            if(nums[i]>tmp)
            {
                 n+=mid-i+1;
                 j++;
            }
            else
            {
                i++;
            }
        }
        i=left,j=mid+1;
        while(i<=mid&&j<=right)
        {
            if(nums[i]>nums[j])
            {
                ret[m++]=nums[j++];
            }
            else
            {
                ret[m++]=nums[i++];
            }
        }
        while(i<=mid)
        {
            ret[m++]=nums[i++];
        }
        while(j<=right)
        {
            ret[m++]=nums[j++];
        }
        for(int i=0;i<ret.size();i++)
        {
            nums[i+left]=ret[i];
        }
    }
    int reversePairs(vector<int>& nums) {
     int n=0;
     qsort(nums,0,nums.size()-1,n);
     return n;   
    }
};