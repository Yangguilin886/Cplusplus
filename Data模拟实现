#include <iostream>
using namespace std;
class Data
{
public:
	Data(int year = 2025, int month = 6, int day = 8)
	{
		_year = year;
		_month = month;
		_day = day;
	}
	bool operator==(Data D2);
	bool operator<(Data D2);
	bool operator<=(Data D2);
	bool operator>(Data D2);
	bool operator>=(Data D2);
	bool operator!=(Data D2);
	int GetMonthday(int year, int month)
	{
		int tmp[13] = { -1,31,28,31,30,31,30,31,31,30,31,30,31 };
			if (month == 2 &&((year%4==0&&year%100!=0)||year%400==0))
			{
				return 29;
			}
		return tmp[month];
	}
	Data& operator+=(int day);
	Data operator+(int day);
	Data& operator-=(int day);
	Data operator-(int day);
	int operator-(const Data& D2);
	Data& operator++();
	Data& operator++(int);
	Data& operator--();
	Data& operator--(int);
	void print();
private:
	int _year;
	int _month;
	int _day;
};
#include "Data.h"
void Data::print()
{
	cout << _year << '/' << _month << '/' << _day << endl;
}
bool Data::operator==(Data D2)
{
	return _year == D2._year
		&& _month == D2._month
		&& _day == D2._day;
}
bool Data::operator<(Data D2)
{
	if (_year < D2._year)
	{
		return true;
	}
	else if (_year == D2._year)
	{
		if (_month < D2._month)
		{
			return true;
		}
		else if(_month==D2._month)
		{
			if (_day < D2._day)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		else
		{
			return false;
		}
	}
	else
	{
		return false;
	}
}
bool Data::operator<=(Data D2)
{
	if (_year < D2._year)
	{
		return true;
	}
	else if (_year == D2._year)
	{
		if (_month < D2._month)
		{
			return true;
		}
		else if (_month == D2._month)
		{
			if (_day <= D2._day)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		else
		{
			return false;
		}
	}
	else
	{
		return false;
	}
}
bool Data::operator>(Data D2)
{
	if (_year > D2._year)
	{
		return true;
	}
	else if (_year == D2._year)
	{
		if (_month > D2._month)
		{
			return true;
		}
		else if (_month == D2._month)
		{
			if (_day > D2._day)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		else
		{
			return false;
		}
	}
	else
	{
		return false;
	}
}
bool Data::operator>=(Data D2)
{
	if (_year > D2._year)
	{
		return true;
	}
	else if (_year == D2._year)
	{
		if (_month > D2._month)
		{
			return true;
		}
		else if (_month == D2._month)
		{
			if (_day >= D2._day)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		else
		{
			return false;
		}
	}
	else
	{
		return false;
	}
}
bool Data::operator!=(Data D2)
{
	return !(*this == D2);
}
Data& Data::operator+=(int day)
{
	_day += day;
	while (_day > GetMonthday(_year, _month))
	{
		_day -= GetMonthday(_year, _month);
		_month++;
		if (_month == 13)
		{
			_year++;
			_month = 1;
		}
	}
	return *this;
}
Data Data::operator+(int day)
{
	Data tmp = *this;
	tmp._day += day;
	while (tmp._day > GetMonthday(tmp._year, tmp._month))
	{
		tmp._day -= GetMonthday(tmp._year, tmp._month);
		tmp._month++;
		if (tmp._month == 13)
		{
			tmp._year++;
			tmp._month = 1;
		}
	}
	return tmp;
}
Data& Data::operator-=(int day)
{
	_day -= day;
	while (_day <= 0)
	{
		_month--;
		if (_month == 0)
		{
			_year--;
			_month = 12;
		}
		_day += GetMonthday(_year, _month);
	}
	return *this;
}
Data Data::operator-(int day)
{
	Data tmp = *this;
	tmp-=day;
	return tmp;
}
int Data::operator-(const Data& D2)
{
	Data max = *this;
	Data min = D2;
	int flag = 1;
	if (*this< D2)
	{
		max = D2;
		min = *this;
		flag = -1;
	}
	int n = 0;
	while(min!=max)
	{
		min+=1;
		++n;
	}
	return flag*n;
}
Data& Data::operator++(int)
{
	*this +=1;
	return *this;
}
Data& Data::operator++()
{
	*this += 1;
	return *this;
}
Data& Data::operator--()
{
	*this -= 1;
	return *this;
}
Data& Data::operator--(int)
{
	*this -= 1;
	return *this;
}