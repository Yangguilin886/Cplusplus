class Solution {
public:
    int reinitializePermutation(int n) {
        vector<int> ret(n);
        vector<int> tmp(n);
        for (int i = 0; i < n; i++) {
            tmp[i] = i;
        }
        int flag = 0;
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                ret[i] = tmp[i / 2];
            } else {
                ret[i] = tmp[n / 2 + (i - 1) / 2];
            }
        }
        for (int i = 0; i < n; i++) {
            if (ret[i] != tmp[i]) {
                tmp[i]=ret[i];
                flag = 1;
            }
        }
        int m=1;
        while (flag==1) {
            m++;
            flag = 0;
            for (int i = 0; i < n; i++) {
                if (i % 2 == 0) {
                    ret[i] = tmp[i / 2];
                } else {
                    ret[i] = tmp[n / 2 + (i - 1) / 2];
                }
            }
            for(int i=0;i<n;i++)
            {
                tmp[i]=ret[i];
                ret[i]=0;
            }
            for(int i=0;i<n;i++)
            {
                if(tmp[i]!=i)
                {
                    flag=1;
                    break;
                }
            }
        }
        return m;
    }
};