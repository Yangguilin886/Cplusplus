#include <iostream>
#include <iterator>
using namespace std;
class Data
{
    friend istream& operator>>(istream& in, Data& D1);
public:
    Data(int year=1, int month=1, int day=1)
    {
        _year = year;
        _month = month;
        _day = day;
    }
    int operator-(Data& D2)
    {
        D2._year = _year;
        int n = 0;
        while (D2 < *this)
        {
            n++;
            D2=D2+1;
        }
        return n;
    }
    Data& operator+(int n)
    {
        _day+=n;
        if (_day > GetMonthDay(_year, _month))
        {
            _day -= GetMonthDay(_year, _month);
            _month ++ ;
            if (_month == 13)
            {
                _month = 1;
                _year++;
            }
        }
        return *this;
    }
    bool operator<(const Data& D)
    {
        if (this->_year > D._year)
        {
            return false;
        }
        else if(this->_year==D._year)
        {
            if (this->_month > D._month)
            {
                return false;
            }
            else if(this->_month==D._month)
            {
                if (this->_day >= D._day)
                {
                    return false;
                }
                else
                {
                    return true;
                }
            }
            return true;
        }
        return true;
    }
    int GetMonthDay(int year, int month)
    {
        int ret[13] = { 0,31,28,31,30,31,30,31,31,30,31,30,31 };
        if (month == 2 && (year % 4 == 0 && year % 100 != 0 || year % 400 == 0))
        {
            return 29;
        }
        return ret[month];
    }
private:
    int _year;
    int _month;
    int _day;
};

istream& operator>>(istream& in, Data& D1)
{
    in >> D1._year >> D1._month >> D1._day;
    return in;
}

int main()
{
    Data D1(2025, 1, 1);
    cin >> D1;
    Data D2(2025, 1, 1);
    cout << D1 - D2 +1<< endl;
}