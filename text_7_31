#include <iostream>
namespace bit

{
    class string

    {


    public:

        typedef char* iterator;

    public:
        void reverse(int n)
        {
            if (n > _capacity)
            {
                char* tmp = new char[n + 1];
                strcpy(tmp, _str);
                delete[] _str;
                _str = tmp;
                _capacity = n;
            }
        }
        string(const char* str = "")
        {
            _size = strlen(str);
            _capacity = _size;
            _str = new char[_capacity+1];
            strcpy(_str, str);
        }

        string(const string& s)
        {
            _capacity = s.capacity();
            _str = new char[_capacity];
            for (int i = 0; i < s.size(); i++)
            {
                _str += s[i];
            }
            _size = s.size();
        }

        string& operator=(const string& s)
        {
            if (_capacity < s.size())
            {
                reverse(s.size() < 2 * _capacity ? 2 * _capacity : s.size());
            }
            for (int i = 0; i < s.size(); i++)
            {
                _str += s[i];
            }
            _size = s.size();
            return *this;
        }

        ~string()
        {
            delete[] _str;
            _str = nullptr;
            _size = _capacity = 0;
        }

        iterator begin()
        {
            return _str;
        }

        iterator end()
        {
            return _str + _size;
        }

        void push_back(char c)
        {
            if (_size == _capacity)
            {
                reverse(_capacity == 0 ? 4 : _capacity * 2);
            }
            _str[_size] = c;
            _size++;
        }

        string& operator+=(char c)
        {
            push_back(c);
            return *this;
        }

        void append(const char* str)
        {
            int n = strlen(str);
            if (n + _size > _capacity)
            {
                reverse(n + _size < 2 * _capacity ? 2 * _capacity : n + _size);
            }
            strcpy(_str + _size, str);
            _size = n + _size;
        }

        string& operator+=(const char* str)
        {
            append(str);
            return *this;
        }

        void clear()
        {
            _str[0] = '\0';
            _size = 0;
        }

        const char* c_str()const
        {
            return _str;
        }



        /////////////////////////////////////////////////////////////

        // capacity

        size_t size()const
        {
            return _size;
        }

        size_t capacity()const
        {
            return _capacity;
        }

        bool empty()const
        {
            if (_size == 0)
            {
                return true;
            }
            return false;
        }

        void resize(size_t n, char c = '\0')
        {
            if (n < _size)
            {
                _size = n;
            }
            else
            {
                for (int i = 0; i < n - _size; i++)
                {
                    _str += c;
                }
                _size = n;
            }
        }

        void reserve(size_t n)
        {
            if (n > _capacity)
            {
                char* tmp = new char[n + 1];
                strcpy(tmp, _str);
                delete[] _str;
                _str = tmp;
                _capacity = n;
            }
        }



        /////////////////////////////////////////////////////////////

        // access

        char& operator[](size_t index)
        {
            return _str[index];
        }

        const char& operator[](size_t index)const
        {
            return _str[index];
        }



        /////////////////////////////////////////////////////////////


        // 返回c在string中第一次出现的位置

        size_t find(char c, size_t pos = 0) const
        {
            int n = 0;
            for (int i = 0; i < _size; i++)
            {
                if (_str[i] == c)
                {
                    n = i;
                    break;
                }
            }
            return n;
        }

        // 返回子串s在string中第一次出现的位置

        size_t find(const char* s, size_t pos = 0) const
        {
            char* ch = strstr(_str, s);
            for (int i=0;i<_size;i++)
            {
                if (*ch == _str[i])
                {
                    return i;
                }
            }
            return -1;
        }

        // 在pos位置上插入字符c/字符串str，并返回该字符的位置

        string& insert(size_t pos, char c)
        {
            for (int i = _size;i>=pos; i--)
            {
                _str[i] = _str[i - 1];
            }
            _str[pos] = c;
            return *this;
        }

        string& insert(size_t pos, const char* str)
        {
            size_t len = _size + strlen(str);
            for (int i = len; i >= len - strlen(str) + 1; i++)
            {
                _str[i] = _str[i - 1];
            }
            for (int i = 0; i < strlen(str); i++)
            {
                _str[pos++] = str[i];
            }
            return *this;
        }



        // 删除pos位置上的元素，并返回该元素的下一个位置

        string& erase(size_t pos, size_t len)
        {
            if (len > _size)
            {
                len = _size;
            }
            for (int i = 0; i < len; i++)
            {
                _str[pos + i] = _str[pos + len+i];
            }
            return *this;
        }

    private:

        char* _str;

        size_t _capacity;

        size_t _size;

    };

    //relational operators;
    bool operator<(const string& s1, const string& s2)
    {
        return (strcmp(s1.c_str(), s2.c_str()) < 0);
    }
    bool operator<=(const string& s1, const string& s2)
    {
        return s1 < s2 || s1==s2;
    }

    bool operator>(const string& s1, const string& s2)
    {
        return !(s1 <= s2);
    }

    bool operator>=(const string& s1, const string& s2)
    {
        return !(s1 < s2);
    }

    bool operator==(const string& s1, const string& s2)
    {
        return (strcmp(s1.c_str(), s2.c_str()) == 0);
    }

    bool operator!=(const string& s1, const string& s2)
    {
        return !(s1 == s2);
    }
};