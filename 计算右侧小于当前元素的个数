class Solution {
public:
    void qsort(vector<int>& nums,vector<int>& ret,int left,int right,vector<int>& sum)
    {
        if(left>=right)
        {
            return ;
        }
        int mid=left+(right-left)/2;
        qsort(nums,ret,left,mid,sum);
        qsort(nums,ret,mid+1,right,sum);
        int i=left,j=mid+1,m=0;
        vector<int> tmp1(right-left+1);
        vector<int> tmp2(right-left+1);
        while(i<=mid&&j<=right)
        {
            if(nums[i]<=nums[j])
            {
                tmp1[m]=nums[j];
                tmp2[m++]=sum[j++];
            }
            else
            {
                ret[sum[i]]+=right-j+1;
                tmp1[m]=nums[i];
                tmp2[m++]=sum[i++];
            }
        }
        while(i<=mid)
        {
            tmp1[m]=nums[i];
            tmp2[m++]=sum[i++];
        }
        while(j<=right)
        {
            tmp1[m]=nums[j];
            tmp2[m++]=sum[j++];
        }
        for(int i=0;i<tmp1.size();i++)
        {
            nums[i+left]=tmp1[i];
            sum[i+left]=tmp2[i];
        }
    }
    vector<int> countSmaller(vector<int>& nums) {
        vector<int> ret(nums.size());
        vector<int> sum;
        for(int i=0;i<nums.size();i++)
        {
            sum.push_back(i);
        }
        qsort(nums,ret,0,nums.size()-1,sum);
        return ret;
    }
};